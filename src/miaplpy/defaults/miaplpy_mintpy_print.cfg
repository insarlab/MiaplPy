# vim: set filetype=cfg:
##------------------------ miaplpyApp.cfg ------------------------##

########## text before script calls
miaplpy.textCmd                        = auto    # [eg: source ~/.bashrc]

########## parallel job setting
miaplpy.multiprocessing.numProcessor              = auto    # auto for 4

########## 1. load data given the area of interest
## auto - automatic path pattern for Univ of Miami file structure
## crop_image.py -h to check more details and example inputs.
## directories are to read from and the subsets will be saved under miaplpy directory
## compression to save disk usage for ifgramStack.h5 file:
## no   - save   0% disk usage, fast [default]
## lzf  - save ~57% disk usage, relative slow
## gzip - save ~62% disk usage, very slow [not recommend]

miaplpy.load.processor      = auto  #[isce,snap,gamma,roipac], auto for isceTops
miaplpy.load.updateMode     = auto  #[yes / no], auto for yes, skip re-loading if HDF5 files are complete
miaplpy.load.compression    = auto  #[gzip / lzf / no], auto for no.
miaplpy.load.autoPath       = auto    # [yes, no] auto for no
##---------Coregistered SLC images:
miaplpy.load.slcFile        = auto  #[path2slc_file]
miaplpy.load.startDate      = auto  #auto for first date
miaplpy.load.endDate        = auto  #auto for last date
##---------for ISCE only:
miaplpy.load.metaFile       = auto  #[path2metadata_file], i.e.: ./reference/IW1.xml, ./referenceShelve/data.dat
miaplpy.load.baselineDir    = auto  #[path2baseline_dir], i.e.: ./baselines
##---------geometry datasets:
miaplpy.load.demFile        = auto  #[path2hgt_file]
miaplpy.load.lookupYFile    = auto  #[path2lat_file], not required for geocoded data
miaplpy.load.lookupXFile    = auto  #[path2lon_file], not required for geocoded data
miaplpy.load.incAngleFile   = auto  #[path2los_file], optional
miaplpy.load.azAngleFile    = auto  #[path2los_file], optional
miaplpy.load.shadowMaskFile = auto  #[path2shadow_file], optional
miaplpy.load.waterMaskFile  = auto  #[path2water_mask_file], optional
miaplpy.load.bperpFile      = auto  #[path2bperp_file], optional
##---------interferogram datasets:
miaplpy.load.unwFile        = auto  #[path2unw_file]
miaplpy.load.corFile        = auto  #[path2cor_file]
miaplpy.load.connCompFile   = auto  #[path2conn_file], optional
miaplpy.load.intFile        = auto  #[path2int_file], optional
miaplpy.load.ionoFile       = auto  #[path2iono_file], optional
##---------subset (optional):
## if both yx and lalo are specified, use lalo option unless a) no lookup file AND b) dataset is in radar coord
miaplpy.subset.yx           = auto    #[y0:y1,x0:x1 / no], auto for no
miaplpy.subset.lalo         = auto    #[S:N,W:E / no], auto for no

########## 2,3. Perform patch wise phase linking and concatenate patches
## window sizes are used in step 2, 3,
miaplpy.inversion.patchSize                = auto   # patch size (n*n) to divide the image for parallel processing, auto for 200
miaplpy.inversion.ministackSize            = auto   # number of images in each ministack, auto for 10
miaplpy.inversion.rangeWindow              = auto   # range window size for searching SHPs, auto for 15
miaplpy.inversion.azimuthWindow            = auto   # azimuth window size for searching SHPs, auto for 15
miaplpy.inversion.shpTest                  = auto   # [ks, ad, ttest] auto for ks: kolmogorov-smirnov test
miaplpy.inversion.phaseLinkingMethod       = auto   # [EVD, EMI, PTA, sequential_EVD, sequential_EMI, sequential_PTA, StBAS], auto for sequential_EMI
miaplpy.inversion.sbw_connNum              = auto   # auto for 10, number of consecutive interferograms
miaplpy.inversion.PsNumShp                 = auto   # auto for 10, number of shps for ps candidates
miaplpy.inversion.mask                     = auto   # mask file for phase inversion, auto for None

########## 4. Select the network and generate interferograms
## Different pairs of interferograms can be choosed for unwrapping.
## Following is a short description of each type
## 1. mini_stacks: It unwraps single reference interferograms in each ministack which is formed from images of each year
## 2. single_reference: It unwraps the single reference interferograms of the whole stack using referenceDate.
## 3. delaunay: delaunay triangles with temporal and spatial baseline threshold.
## 4. sequential: sequential interferograms
## You may also unwrap certain combination of pairs by giving them in a text file as miaplpy.interferograms.list
miaplpy.interferograms.networkType             = auto     # [mini_stacks, single_reference, sequential, delaunay] default: single_reference
miaplpy.interferograms.list                    = auto     # auto for None, list of interferograms to unwrap in a text file
miaplpy.interferograms.referenceDate           = auto     # auto for the middle image
miaplpy.interferograms.filterStrength          = auto     # [0-1], interferogram smoothing factor, auto for 0
miaplpy.interferograms.ministackRefMonth       = auto     # The month of the year that coherence is high to choose reference from, default: 06
miaplpy.interferograms.connNum                 = auto     # Number of connections in sequential interferograms, auto for 3
miaplpy.interferograms.delaunayBaselineRatio   = auto     # [1, 4, 9] Ratio between perpendiclar and temporal baselines, auto for 4
miaplpy.interferograms.delaunayTempThresh      = auto     # [days] temporal threshold for delaunay triangles, auto for 120
miaplpy.interferograms.delaunayPerpThresh      = auto     # [meters] Perp baseline threshold for delaunay triangles, auto for 200
miaplpy.interferograms.oneYear                 = auto     # [yes, no ] Add one year interferograms, auto for no

########## 5. Unwrap interferograms
miaplpy.unwrap.two-stage                  = auto     # [yes, no], auto for yes, Do two stage unwrapping
miaplpy.unwrap.removeFilter               = auto     # [yes, no], auto for yes, remove filter after unwrap
miaplpy.unwrap.snaphu.maxDiscontinuity    = auto     # (snaphu parameter) max phase discontinuity in cycle, auto for 1.2
miaplpy.unwrap.snaphu.initMethod          = auto     # [MCF, MST] auto for MCF
miaplpy.unwrap.snaphu.tileNumPixels       = auto     # number of pixels in a tile, auto for 10000000
miaplpy.unwrap.mask                       = auto     # auto for None

########## 6,7. Load interferograms
# Set options in mintpy config file

########## 8. Invert network of interferograms to timeseries
miaplpy.timeseries.tempCohType            = auto     # [full, average], auto for full.
miaplpy.timeseries.minTempCoh             = auto     # auto for 0.5
miaplpy.timeseries.waterMask              = auto     # auto for None, path to water mask
miaplpy.timeseries.shadowMask             = auto     # [yes, no] auto for no, using shadow mask to mask final results
miaplpy.timeseries.residualNorm           = auto     #[L1, L2], auto for L2, norm minimization solution
miaplpy.timeseries.L1smoothingFactor      = auto     #[0-1] auto for 0.01
miaplpy.timeseries.L2weightFunc           = auto     #[var / fim / coh / no], auto for var
miaplpy.timeseries.minNormVelocity        = auto     #[yes / no], auto for yes, min-norm deformation velocity / phase

########## 9. Timeseries Correction
# Set options in mintpy config file


##------------------------ smallbaselineApp.cfg ------------------------##
########## computing resource configuration
mintpy.compute.maxMemory = auto #[float > 0.0], auto for 4, max memory to allocate in GB
## parallel processing with dask
## currently apply to steps: invert_network, correct_topography
## cluster   = none to turn off the parallel computing
## numWorker = all  to use all locally available cores (for cluster = local only)
## config    = none to rollback to the default name (same as the cluster type; for cluster != local)
mintpy.compute.cluster   = auto #[local / slurm / pbs / lsf / none], auto for none, cluster type
mintpy.compute.numWorker = auto #[int > 1 / all], auto for 4 (local) or 40 (non-local), num of workers
mintpy.compute.config    = auto #[none / slurm / pbs / lsf ], auto for none (same as cluster), config name

########## reference_point
## Reference all interferograms to one common point in space
## auto - randomly select a pixel with coherence > minCoherence
## however, manually specify using prior knowledge of the study area is highly recommended
##   with the following guideline (section 4.3 in Yunjun et al., 2019):
## 1) located in a coherence area, to minimize the decorrelation effect.
## 2) not affected by strong atmospheric turbulence, i.e. ionospheric streaks
## 3) close to and with similar elevation as the AOI, to minimize the impact of spatially correlated atmospheric delay
mintpy.reference.yx            = auto   #[257,151 / auto]
mintpy.reference.lalo          = auto   #[31.8,130.8 / auto]
mintpy.reference.maskFile      = auto   #[filename / no], auto for maskConnComp.h5
mintpy.reference.coherenceFile = auto   #[filename], auto for avgSpatialCoh.h5
mintpy.reference.minCoherence  = auto   #[0.0-1.0], auto for 0.85, minimum coherence for auto method


########## quick_overview
## A quick assessment of:
## 1) possible ground deformation
##    using the velocity from the traditional interferogram stacking
##    reference: Zebker et al. (1997, JGR)
## 2) distribution of phase unwrapping error
##    from the number of interferogram triplets with non-zero integer ambiguity of closue phase
##    reference: T_int in Yunjun et al. (2019, CAGEO). Related to section 3.2, equation (8-9) and Fig. 3d-e.

########## correct_unwrap_error (optional)
## connected components (mintpy.load.connCompFile) are required for this step.
## reference: Yunjun et al. (2019, section 3)
## supported methods:
## a. phase_closure          - suitable for highly redundant network
## b. bridging               - suitable for regions separated by narrow decorrelated features, e.g. rivers, narrow water bodies
## c. bridging+phase_closure - recommended when there is a small percentage of errors left after bridging
mintpy.unwrapError.method          = auto  #[bridging / phase_closure / bridging+phase_closure / no], auto for no
mintpy.unwrapError.waterMaskFile   = auto  #[waterMask.h5 / no], auto for waterMask.h5 or no [if not found]

## phase_closure options:
## numSample - a region-based strategy is implemented to speedup L1-norm regularized least squares inversion.
##     Instead of inverting every pixel for the integer ambiguity, a common connected component mask is generated,
##     for each common conn. comp., numSample pixels are radomly selected for inversion, and the median value of the results
##     are used for all pixels within this common conn. comp.
mintpy.unwrapError.numSample       = auto  #[int>1], auto for 100, number of samples to invert for common conn. comp.

## briding options:
## ramp - a phase ramp could be estimated based on the largest reliable region, removed from the entire interferogram
##     before estimating the phase difference between reliable regions and added back after the correction.
## bridgePtsRadius - half size of the window used to calculate the median value of phase difference
mintpy.unwrapError.ramp            = auto  #[linear / quadratic], auto for no; recommend linear for L-band data
mintpy.unwrapError.bridgePtsRadius = auto  #[1-inf], auto for 50, half size of the window around end points

########## correct_LOD
## Local Oscillator Drift (LOD) correction (for Envisat only)
## reference: Marinkovic and Larsen (2013, Proc. LPS)
## automatically applied to Envisat data (identified via PLATFORM attribute)
## and skipped for all the other satellites.

########## correct_SET
## Solid Earth tides (SET) correction [need to install insarlab/PySolid]
## reference: Milbert (2018); Fattahi et al. (2020, AGU)
mintpy.solidEarthTides = auto #[yes / no], auto for no

########## correct_troposphere (optional but recommended)
## correct tropospheric delay using the following methods:
## a. height_correlation - correct stratified tropospheric delay (Doin et al., 2009, J Applied Geop)
## b. pyaps - use Global Atmospheric Models (GAMs) data (Jolivet et al., 2011; 2014)
##      ERA5  - ERA-5       from ECMWF [need to install PyAPS from GitHub; recommended and turn ON by default]
##      MERRA - MERRA-2     from NASA  [need to install PyAPS from Caltech/EarthDef]
##      NARR  - NARR        from NOAA  [need to install PyAPS from Caltech/EarthDef; recommended for N America]
## c. gacos - use GACOS with the iterative tropospheric decomposition model (Yu et al., 2018a, RSE; 2018b, JGR)
##      need to manually download GACOS products at http://www.gacos.net for all acquisitions before running this step
mintpy.troposphericDelay.method = auto  #[pyaps / height_correlation / gacos / no], auto for pyaps

## Notes for pyaps:
## a. GAM data latency: with the most recent SAR data, there will be GAM data missing, the correction
##    will be applied to dates with GAM data available and skipped for the others.
## b. WEATHER_DIR: if you define an environment variable named WEATHER_DIR to contain the path to a
##    directory, then MintPy applications will download the GAM files into the indicated directory.
##    MintPy application will look for the GAM files in the directory before downloading a new one to
##    prevent downloading multiple copies if you work with different dataset that cover the same date/time.
mintpy.troposphericDelay.weatherModel = auto  #[ERA5 / MERRA / NARR], auto for ERA5
mintpy.troposphericDelay.weatherDir   = auto  #[path2directory], auto for WEATHER_DIR or "./"

## Notes for height_correlation:
## Extra multilooking is applied to estimate the empirical phase/elevation ratio ONLY.
## For an dataset with 5 by 15 looks, looks=8 will generate phase with (5*8) by (15*8) looks
## to estimate the empirical parameter; then apply the correction to original phase (with 5 by 15 looks),
## if the phase/elevation correlation is larger than minCorrelation.
mintpy.troposphericDelay.polyOrder      = auto  #[1 / 2 / 3], auto for 1
mintpy.troposphericDelay.looks          = auto  #[1-inf], auto for 8, extra multilooking num
mintpy.troposphericDelay.minCorrelation = auto  #[0.0-1.0], auto for 0

## Notes for gacos:
## Set the path below to directory that contains the downloaded *.ztd* files
mintpy.troposphericDelay.gacosDir = auto # [path2directory], auto for "./GACOS"


########## deramp (optional)
## Estimate and remove a phase ramp for each acquisition based on the reliable pixels.
## Recommended for localized deformation signals, i.e. volcanic deformation, landslide and land subsidence, etc.
## NOT recommended for long spatial wavelength deformation signals, i.e. co-, post- and inter-seimic deformation.
mintpy.deramp          = auto  #[no / linear / quadratic], auto for no - no ramp will be removed
mintpy.deramp.maskFile = auto  #[filename / no], auto for maskTempCoh.h5, mask file for ramp estimation


########## correct_topography (optional but recommended)
## Topographic residual (DEM error) correction
## reference: Fattahi and Amelung (2013, IEEE-TGRS)
## stepFuncDate      - specify stepFuncDate option if you know there are sudden displacement jump in your area,
##                     e.g. volcanic eruption, or earthquake
## excludeDate       - dates excluded for the error estimation
## pixelwiseGeometry - use pixel-wise geometry (incidence angle & slant range distance)
##                     yes - use pixel-wise geometry if they are available [slow; used by default]
##                     no  - use the mean   geometry [fast]
mintpy.topographicResidual                   = auto  #[yes / no], auto for yes
mintpy.topographicResidual.polyOrder         = auto  #[1-inf], auto for 2, poly order of temporal deformation model
mintpy.topographicResidual.phaseVelocity     = auto  #[yes / no], auto for no - phase, use phase velocity for minimization
mintpy.topographicResidual.stepFuncDate      = auto  #[20080529,20100611 / no], auto for no, date of step jump
mintpy.topographicResidual.excludeDate       = auto  #[20070321 / txtFile / no], auto for exclude_date.txt
mintpy.topographicResidual.pixelwiseGeometry = auto  #[yes / no], auto for yes, use pixel-wise geometry info


########## residual_RMS (root mean squares for noise evaluation)
## Calculate the Root Mean Square (RMS) of residual phase time-series for each acquisition
## reference: Yunjun et al. (2019, section 4.9 and 5.4)
## To get rid of long wavelength component in space, a ramp is removed for each acquisition
## Set optimal reference date to date with min RMS
## Set exclude dates (outliers) to dates with RMS > cutoff * median RMS (Median Absolute Deviation)
mintpy.residualRMS.maskFile = auto  #[file name / no], auto for maskTempCoh.h5, mask for ramp estimation
mintpy.residualRMS.deramp   = auto  #[quadratic / linear / no], auto for quadratic
mintpy.residualRMS.cutoff   = auto  #[0.0-inf], auto for 3

########## reference_date
## Reference all time-series to one date in time
## reference: Yunjun et al. (2019, section 4.9)
## no     - do not change the default reference date (1st date)
mintpy.reference.date = auto   #[reference_date.txt / 20090214 / no], auto for reference_date.txt


########## velocity
## Estimate linear velocity and its standard deviation from time-series
## and from tropospheric delay file if exists.
## reference: Fattahi and Amelung (2015, JGR)
mintpy.velocity.excludeDate    = auto   #[exclude_date.txt / 20080520,20090817 / no], auto for exclude_date.txt
mintpy.velocity.startDate      = auto   #[20070101 / no], auto for no
mintpy.velocity.endDate        = auto   #[20101230 / no], auto for no

## Bootstrapping
## refernce: Efron and Tibshirani (1986, Stat. Sci.)
mintpy.velocity.bootstrap      = auto   #[yes / no], auto for no, use bootstrap
mintpy.velocity.bootstrapCount = auto   #[int>1], auto for 400, number of iterations for bootstrapping


########## geocode (post-processing)
# for input dataset in radar coordinates only
# commonly used resolution in meters and in degrees (on equator)
# 100,         60,          50,          30,          20,          10
# 0.000925926, 0.000555556, 0.000462963, 0.000277778, 0.000185185, 0.000092593
mintpy.geocode              = auto  #[yes / no], auto for yes
mintpy.geocode.SNWE         = auto  #[-1.2,0.5,-92,-91 / none ], auto for none, output extent in degree
mintpy.geocode.laloStep     = auto  #[-0.000555556,0.000555556 / None], auto for None, output resolution in degree
mintpy.geocode.interpMethod = auto  #[nearest], auto for nearest, interpolation method
mintpy.geocode.fillValue    = auto  #[np.nan, 0, ...], auto for np.nan, fill value for outliers.

########## google_earth (post-processing)
mintpy.save.kmz             = auto   #[yes / no], auto for yes, save geocoded velocity to Google Earth KMZ file

########## hdfeos5 (post-processing)
mintpy.save.hdfEos5         = auto   #[yes / no], auto for no, save time-series to HDF-EOS5 format
mintpy.save.hdfEos5.update  = auto   #[yes / no], auto for no, put XXXXXXXX as endDate in output filename
mintpy.save.hdfEos5.subset  = auto   #[yes / no], auto for no, put subset range info   in output filename

########## plot
mintpy.plot = auto   #[yes / no], auto for yes, plot files generated by default processing to pic folder

